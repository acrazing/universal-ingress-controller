// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: universal_ingress_controller/nginx_subscriber/v1/discovery.proto

package nginxv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LocalFileServiceClient is the client API for LocalFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LocalFileServiceClient interface {
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (LocalFileService_WatchClient, error)
}

type localFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLocalFileServiceClient(cc grpc.ClientConnInterface) LocalFileServiceClient {
	return &localFileServiceClient{cc}
}

func (c *localFileServiceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (LocalFileService_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &LocalFileService_ServiceDesc.Streams[0], "/universal_ingress_controller.nginx_subscriber.v1.LocalFileService/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &localFileServiceWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LocalFileService_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type localFileServiceWatchClient struct {
	grpc.ClientStream
}

func (x *localFileServiceWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LocalFileServiceServer is the server API for LocalFileService service.
// All implementations must embed UnimplementedLocalFileServiceServer
// for forward compatibility
type LocalFileServiceServer interface {
	Watch(*WatchRequest, LocalFileService_WatchServer) error
	mustEmbedUnimplementedLocalFileServiceServer()
}

// UnimplementedLocalFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLocalFileServiceServer struct {
}

func (UnimplementedLocalFileServiceServer) Watch(*WatchRequest, LocalFileService_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedLocalFileServiceServer) mustEmbedUnimplementedLocalFileServiceServer() {}

// UnsafeLocalFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LocalFileServiceServer will
// result in compilation errors.
type UnsafeLocalFileServiceServer interface {
	mustEmbedUnimplementedLocalFileServiceServer()
}

func RegisterLocalFileServiceServer(s grpc.ServiceRegistrar, srv LocalFileServiceServer) {
	s.RegisterService(&LocalFileService_ServiceDesc, srv)
}

func _LocalFileService_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LocalFileServiceServer).Watch(m, &localFileServiceWatchServer{stream})
}

type LocalFileService_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type localFileServiceWatchServer struct {
	grpc.ServerStream
}

func (x *localFileServiceWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

// LocalFileService_ServiceDesc is the grpc.ServiceDesc for LocalFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LocalFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "universal_ingress_controller.nginx_subscriber.v1.LocalFileService",
	HandlerType: (*LocalFileServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _LocalFileService_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "universal_ingress_controller/nginx_subscriber/v1/discovery.proto",
}
