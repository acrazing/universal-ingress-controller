// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/core_config.proto

package core

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Config) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfigMultiError, or nil if none found.
func (m *Config) ValidateAll() error {
	return m.validate(true)
}

func (m *Config) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPort() >= 65536 {
		err := ConfigValidationError{
			field:  "Port",
			reason: "value must be less than 65536",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	{
		sorted_keys := make([]string, len(m.GetSubscribers()))
		i := 0
		for key := range m.GetSubscribers() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetSubscribers()[key]
			_ = val

			if val == nil {
				err := ConfigValidationError{
					field:  fmt.Sprintf("Subscribers[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if _, ok := _Config_Subscribers_NotInLookup[key]; ok {
				err := ConfigValidationError{
					field:  fmt.Sprintf("Subscribers[%v]", key),
					reason: "value must not be in list []",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if val == nil {
				err := ConfigValidationError{
					field:  fmt.Sprintf("Subscribers[%v]", key),
					reason: "value is required",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("Subscribers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, ConfigValidationError{
							field:  fmt.Sprintf("Subscribers[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return ConfigValidationError{
						field:  fmt.Sprintf("Subscribers[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return ConfigMultiError(errors)
	}

	return nil
}

// ConfigMultiError is an error wrapping multiple validation errors returned by
// Config.ValidateAll() if the designated constraints aren't met.
type ConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigMultiError) AllErrors() []error { return m }

// ConfigValidationError is the validation error returned by Config.Validate if
// the designated constraints aren't met.
type ConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigValidationError) ErrorName() string { return "ConfigValidationError" }

// Error satisfies the builtin error interface
func (e ConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigValidationError{}

// Validate checks the field values on Config_SubscriberConfig with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Config_SubscriberConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Config_SubscriberConfig with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Config_SubscriberConfigMultiError, or nil if none found.
func (m *Config_SubscriberConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *Config_SubscriberConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	{
		sorted_keys := make([]string, len(m.GetResources()))
		i := 0
		for key := range m.GetResources() {
			sorted_keys[i] = key
			i++
		}
		sort.Slice(sorted_keys, func(i, j int) bool { return sorted_keys[i] < sorted_keys[j] })
		for _, key := range sorted_keys {
			val := m.GetResources()[key]
			_ = val

			if val == nil {
				err := Config_SubscriberConfigValidationError{
					field:  fmt.Sprintf("Resources[%v]", key),
					reason: "value cannot be sparse, all pairs must be non-nil",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if _, ok := _Config_SubscriberConfig_Resources_NotInLookup[key]; ok {
				err := Config_SubscriberConfigValidationError{
					field:  fmt.Sprintf("Resources[%v]", key),
					reason: "value must not be in list []",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if val == nil {
				err := Config_SubscriberConfigValidationError{
					field:  fmt.Sprintf("Resources[%v]", key),
					reason: "value is required",
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}

			if all {
				switch v := interface{}(val).(type) {
				case interface{ ValidateAll() error }:
					if err := v.ValidateAll(); err != nil {
						errors = append(errors, Config_SubscriberConfigValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				case interface{ Validate() error }:
					if err := v.Validate(); err != nil {
						errors = append(errors, Config_SubscriberConfigValidationError{
							field:  fmt.Sprintf("Resources[%v]", key),
							reason: "embedded message failed validation",
							cause:  err,
						})
					}
				}
			} else if v, ok := interface{}(val).(interface{ Validate() error }); ok {
				if err := v.Validate(); err != nil {
					return Config_SubscriberConfigValidationError{
						field:  fmt.Sprintf("Resources[%v]", key),
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		}
	}

	if len(errors) > 0 {
		return Config_SubscriberConfigMultiError(errors)
	}

	return nil
}

// Config_SubscriberConfigMultiError is an error wrapping multiple validation
// errors returned by Config_SubscriberConfig.ValidateAll() if the designated
// constraints aren't met.
type Config_SubscriberConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Config_SubscriberConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Config_SubscriberConfigMultiError) AllErrors() []error { return m }

// Config_SubscriberConfigValidationError is the validation error returned by
// Config_SubscriberConfig.Validate if the designated constraints aren't met.
type Config_SubscriberConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_SubscriberConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_SubscriberConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_SubscriberConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_SubscriberConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_SubscriberConfigValidationError) ErrorName() string {
	return "Config_SubscriberConfigValidationError"
}

// Error satisfies the builtin error interface
func (e Config_SubscriberConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_SubscriberConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_SubscriberConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_SubscriberConfigValidationError{}

// Validate checks the field values on Config_SubscriberConfig_ResourceConfig
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *Config_SubscriberConfig_ResourceConfig) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// Config_SubscriberConfig_ResourceConfig with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// Config_SubscriberConfig_ResourceConfigMultiError, or nil if none found.
func (m *Config_SubscriberConfig_ResourceConfig) ValidateAll() error {
	return m.validate(true)
}

func (m *Config_SubscriberConfig_ResourceConfig) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _Config_SubscriberConfig_ResourceConfig_Kind_NotInLookup[m.GetKind()]; ok {
		err := Config_SubscriberConfig_ResourceConfigValidationError{
			field:  "Kind",
			reason: "value must not be in list [0]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Config_SubscriberConfig_ResourceConfig_Name_NotInLookup[m.GetName()]; ok {
		err := Config_SubscriberConfig_ResourceConfigValidationError{
			field:  "Name",
			reason: "value must not be in list []",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetPath()) < 1 {
		err := Config_SubscriberConfig_ResourceConfigValidationError{
			field:  "Path",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Config_SubscriberConfig_ResourceConfig_Path_Unique := make(map[string]struct{}, len(m.GetPath()))

	for idx, item := range m.GetPath() {
		_, _ = idx, item

		if _, exists := _Config_SubscriberConfig_ResourceConfig_Path_Unique[item]; exists {
			err := Config_SubscriberConfig_ResourceConfigValidationError{
				field:  fmt.Sprintf("Path[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Config_SubscriberConfig_ResourceConfig_Path_Unique[item] = struct{}{}
		}

		if _, ok := _Config_SubscriberConfig_ResourceConfig_Path_NotInLookup[item]; ok {
			err := Config_SubscriberConfig_ResourceConfigValidationError{
				field:  fmt.Sprintf("Path[%v]", idx),
				reason: "value must not be in list []",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return Config_SubscriberConfig_ResourceConfigMultiError(errors)
	}

	return nil
}

// Config_SubscriberConfig_ResourceConfigMultiError is an error wrapping
// multiple validation errors returned by
// Config_SubscriberConfig_ResourceConfig.ValidateAll() if the designated
// constraints aren't met.
type Config_SubscriberConfig_ResourceConfigMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Config_SubscriberConfig_ResourceConfigMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Config_SubscriberConfig_ResourceConfigMultiError) AllErrors() []error { return m }

// Config_SubscriberConfig_ResourceConfigValidationError is the validation
// error returned by Config_SubscriberConfig_ResourceConfig.Validate if the
// designated constraints aren't met.
type Config_SubscriberConfig_ResourceConfigValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Config_SubscriberConfig_ResourceConfigValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Config_SubscriberConfig_ResourceConfigValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Config_SubscriberConfig_ResourceConfigValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Config_SubscriberConfig_ResourceConfigValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Config_SubscriberConfig_ResourceConfigValidationError) ErrorName() string {
	return "Config_SubscriberConfig_ResourceConfigValidationError"
}

// Error satisfies the builtin error interface
func (e Config_SubscriberConfig_ResourceConfigValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfig_SubscriberConfig_ResourceConfig.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Config_SubscriberConfig_ResourceConfigValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Config_SubscriberConfig_ResourceConfigValidationError{}

var _Config_SubscriberConfig_ResourceConfig_Kind_NotInLookup = map[Config_SubscriberConfig_ResourceConfig_Kind]struct{}{
	0: {},
}

var _Config_SubscriberConfig_ResourceConfig_Name_NotInLookup = map[string]struct{}{
	"": {},
}

var _Config_SubscriberConfig_ResourceConfig_Path_NotInLookup = map[string]struct{}{
	"": {},
}
